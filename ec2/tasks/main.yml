
- name: Create ec2 Security Group
  amazon.aws.ec2_group:
    profile: "{{ ec2.profile }}"
    name: "{{ ec2.instance_name }}"
    description: "{{ ec2.instance_name }} security group"
    region: "{{ ec2.region }}"
    vpc_id: "{{ ec2.vpc_id }}"
    rules:
      - proto: tcp
        ports:
        - 80
        - 443
        - 22
        cidr_ip: 0.0.0.0/0
        rule_desc: "Allow HTTP from anywhere"
  register: ec2_sg

- name: Create ec2 Instance
  community.aws.ec2_instance:
    name: '{{ ec2.instance_name }}'
    key_name: '{{ ec2.key_name }}'
    vpc_subnet_id: '{{ ec2.subnet_id }}'
    network:
      assign_public_ip: true
    volumes:
    - device_name: /dev/sda1
      ebs:
        volume_type: 'gp3'
        volume_size: '{{ ec2.volume_size }}'
        delete_on_termination: true
    instance_type: '{{ ec2.instance_type }}'
    image_id: "{{ ec2.ami_id }}"
    security_group: '{{ ec2_sg.group_id }}'
    instance_role: "AmazonSSMRoleForInstancesQuickSetup"
    wait: yes
    # wait_timeout: 300
  register: ec2_instance

- name: Add new.foo.com as an A record with 3 IPs and wait until the changes have been replicated
  community.aws.route53:
    state: present
    zone: '{{ ec2.domain_name }}'
    record: '{{ ec2.server_name }}.{{ ec2.domain_name }}'
    type: A
    ttl: 60
    value: "{{ item.public_ip_address }}"
    wait: yes
  loop: "{{ ec2_instance.instances }}"

- name: Add new instance to host group
  add_host:
    hostname: "{{ item.public_ip_address }}"
    groupname: launched
  loop: "{{ ec2_instance.instances }}"

- name: Wait for SSH to come up
  delegate_to: "{{ item.public_dns_name }}"
  wait_for_connection:
    delay: 30
    # timeout: 320
  loop: "{{ ec2_instance.instances }}"
